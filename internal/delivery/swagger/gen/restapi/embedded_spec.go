// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API Server for Warehouse Platform",
    "title": "Warehouse Platform",
    "contact": {},
    "version": "0.1"
  },
  "host": "localhost:8081",
  "basePath": "/api/v1/",
  "paths": {
    "/auth/log-out": {
      "post": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "logout system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "LogOut",
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "500": {
            "description": "internal error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "description": "refresh access and refresh tokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "RefreshToken",
        "parameters": [
          {
            "description": "refresh token",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.refreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.tokensResponse"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/sign-in": {
      "post": {
        "description": "login into system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "SignIn",
        "parameters": [
          {
            "description": "sign in data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.signInRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.signInResponse"
            }
          },
          "400": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "forbidden",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "description": "registration into system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "SignUp",
        "parameters": [
          {
            "description": "sign up data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.signUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "Bad request or user with such email already exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "get user by token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "GetUser",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.user"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "update user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "UpdateUser",
        "parameters": [
          {
            "description": "refresh token",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.updateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "user.refreshTokenRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "user.signInRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "tom@test.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "123456789"
        }
      }
    },
    "user.signInResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "$ref": "#/definitions/user.tokensResponse"
        },
        "user": {
          "$ref": "#/definitions/user.user"
        }
      }
    },
    "user.signUpRequest": {
      "type": "object",
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "tom@test.com"
        },
        "name": {
          "type": "string",
          "example": "Tom"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "123456789"
        }
      }
    },
    "user.tokensResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "user.updateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "user.user": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "UsersAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API Server for Warehouse Platform",
    "title": "Warehouse Platform",
    "contact": {},
    "version": "0.1"
  },
  "host": "localhost:8081",
  "basePath": "/api/v1/",
  "paths": {
    "/auth/log-out": {
      "post": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "logout system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "LogOut",
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "500": {
            "description": "internal error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "description": "refresh access and refresh tokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "RefreshToken",
        "parameters": [
          {
            "description": "refresh token",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.refreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.tokensResponse"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/sign-in": {
      "post": {
        "description": "login into system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "SignIn",
        "parameters": [
          {
            "description": "sign in data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.signInRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.signInResponse"
            }
          },
          "400": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "forbidden",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "description": "registration into system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "SignUp",
        "parameters": [
          {
            "description": "sign up data",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.signUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "Bad request or user with such email already exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "internal error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "get user by token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "GetUser",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/user.user"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "UsersAuth": []
          }
        ],
        "description": "update user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "UpdateUser",
        "parameters": [
          {
            "description": "refresh token",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.updateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "error message",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "user.refreshTokenRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "user.signInRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "tom@test.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "123456789"
        }
      }
    },
    "user.signInResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "$ref": "#/definitions/user.tokensResponse"
        },
        "user": {
          "$ref": "#/definitions/user.user"
        }
      }
    },
    "user.signUpRequest": {
      "type": "object",
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "tom@test.com"
        },
        "name": {
          "type": "string",
          "example": "Tom"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "123456789"
        }
      }
    },
    "user.tokensResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "user.updateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "user.user": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "UsersAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
