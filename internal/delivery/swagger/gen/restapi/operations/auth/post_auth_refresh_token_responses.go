// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/youngmikedev/warehouse/internal/delivery/swagger/gen/models"
)

// PostAuthRefreshTokenOKCode is the HTTP code returned for type PostAuthRefreshTokenOK
const PostAuthRefreshTokenOKCode int = 200

/*PostAuthRefreshTokenOK ok

swagger:response postAuthRefreshTokenOK
*/
type PostAuthRefreshTokenOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserTokensResponse `json:"body,omitempty"`
}

// NewPostAuthRefreshTokenOK creates PostAuthRefreshTokenOK with default headers values
func NewPostAuthRefreshTokenOK() *PostAuthRefreshTokenOK {

	return &PostAuthRefreshTokenOK{}
}

// WithPayload adds the payload to the post auth refresh token o k response
func (o *PostAuthRefreshTokenOK) WithPayload(payload *models.UserTokensResponse) *PostAuthRefreshTokenOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth refresh token o k response
func (o *PostAuthRefreshTokenOK) SetPayload(payload *models.UserTokensResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRefreshTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAuthRefreshTokenForbiddenCode is the HTTP code returned for type PostAuthRefreshTokenForbidden
const PostAuthRefreshTokenForbiddenCode int = 403

/*PostAuthRefreshTokenForbidden forbidden

swagger:response postAuthRefreshTokenForbidden
*/
type PostAuthRefreshTokenForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostAuthRefreshTokenForbidden creates PostAuthRefreshTokenForbidden with default headers values
func NewPostAuthRefreshTokenForbidden() *PostAuthRefreshTokenForbidden {

	return &PostAuthRefreshTokenForbidden{}
}

// WithPayload adds the payload to the post auth refresh token forbidden response
func (o *PostAuthRefreshTokenForbidden) WithPayload(payload string) *PostAuthRefreshTokenForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth refresh token forbidden response
func (o *PostAuthRefreshTokenForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRefreshTokenForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostAuthRefreshTokenInternalServerErrorCode is the HTTP code returned for type PostAuthRefreshTokenInternalServerError
const PostAuthRefreshTokenInternalServerErrorCode int = 500

/*PostAuthRefreshTokenInternalServerError error message

swagger:response postAuthRefreshTokenInternalServerError
*/
type PostAuthRefreshTokenInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostAuthRefreshTokenInternalServerError creates PostAuthRefreshTokenInternalServerError with default headers values
func NewPostAuthRefreshTokenInternalServerError() *PostAuthRefreshTokenInternalServerError {

	return &PostAuthRefreshTokenInternalServerError{}
}

// WithPayload adds the payload to the post auth refresh token internal server error response
func (o *PostAuthRefreshTokenInternalServerError) WithPayload(payload string) *PostAuthRefreshTokenInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth refresh token internal server error response
func (o *PostAuthRefreshTokenInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRefreshTokenInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
