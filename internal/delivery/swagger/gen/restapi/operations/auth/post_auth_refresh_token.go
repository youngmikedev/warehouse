// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAuthRefreshTokenHandlerFunc turns a function with the right signature into a post auth refresh token handler
type PostAuthRefreshTokenHandlerFunc func(PostAuthRefreshTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthRefreshTokenHandlerFunc) Handle(params PostAuthRefreshTokenParams) middleware.Responder {
	return fn(params)
}

// PostAuthRefreshTokenHandler interface for that can handle valid post auth refresh token params
type PostAuthRefreshTokenHandler interface {
	Handle(PostAuthRefreshTokenParams) middleware.Responder
}

// NewPostAuthRefreshToken creates a new http.Handler for the post auth refresh token operation
func NewPostAuthRefreshToken(ctx *middleware.Context, handler PostAuthRefreshTokenHandler) *PostAuthRefreshToken {
	return &PostAuthRefreshToken{Context: ctx, Handler: handler}
}

/* PostAuthRefreshToken swagger:route POST /auth/refresh-token auth postAuthRefreshToken

RefreshToken

refresh access and refresh tokens

*/
type PostAuthRefreshToken struct {
	Context *middleware.Context
	Handler PostAuthRefreshTokenHandler
}

func (o *PostAuthRefreshToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAuthRefreshTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
