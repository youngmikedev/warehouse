// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetProductsURL generates an URL for the get products operation
type GetProductsURL struct {
	ArticleLike *string
	L           *int64
	NameLike    *string
	P           *int64
	PriceFrom   *int64
	PriceTo     *int64
	SortField   *string
	SortOrder   *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetProductsURL) WithBasePath(bp string) *GetProductsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetProductsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetProductsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/products"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v1/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var articleLikeQ string
	if o.ArticleLike != nil {
		articleLikeQ = *o.ArticleLike
	}
	if articleLikeQ != "" {
		qs.Set("articleLike", articleLikeQ)
	}

	var lQ string
	if o.L != nil {
		lQ = swag.FormatInt64(*o.L)
	}
	if lQ != "" {
		qs.Set("l", lQ)
	}

	var nameLikeQ string
	if o.NameLike != nil {
		nameLikeQ = *o.NameLike
	}
	if nameLikeQ != "" {
		qs.Set("nameLike", nameLikeQ)
	}

	var pQ string
	if o.P != nil {
		pQ = swag.FormatInt64(*o.P)
	}
	if pQ != "" {
		qs.Set("p", pQ)
	}

	var priceFromQ string
	if o.PriceFrom != nil {
		priceFromQ = swag.FormatInt64(*o.PriceFrom)
	}
	if priceFromQ != "" {
		qs.Set("priceFrom", priceFromQ)
	}

	var priceToQ string
	if o.PriceTo != nil {
		priceToQ = swag.FormatInt64(*o.PriceTo)
	}
	if priceToQ != "" {
		qs.Set("priceTo", priceToQ)
	}

	var sortFieldQ string
	if o.SortField != nil {
		sortFieldQ = *o.SortField
	}
	if sortFieldQ != "" {
		qs.Set("sortField", sortFieldQ)
	}

	var sortOrderQ string
	if o.SortOrder != nil {
		sortOrderQ = *o.SortOrder
	}
	if sortOrderQ != "" {
		qs.Set("sortOrder", sortOrderQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetProductsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetProductsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetProductsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetProductsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetProductsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetProductsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
