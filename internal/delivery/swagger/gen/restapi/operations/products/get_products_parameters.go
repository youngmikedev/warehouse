// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetProductsParams creates a new GetProductsParams object
// with the default values initialized.
func NewGetProductsParams() GetProductsParams {

	var (
		// initialize parameters with default values

		sortFieldDefault = string("id")
		sortOrderDefault = string("desc")
	)

	return GetProductsParams{
		SortField: &sortFieldDefault,

		SortOrder: &sortOrderDefault,
	}
}

// GetProductsParams contains all the bound params for the get products operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetProducts
type GetProductsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*article will contain this string
	  In: query
	*/
	ArticleLike *string
	/*number of items to display
	  In: query
	*/
	L *int64
	/*name will contain this string
	  In: query
	*/
	NameLike *string
	/*page number
	  In: query
	*/
	P *int64
	/*price will be greater then or equal to this number
	  In: query
	*/
	PriceFrom *int64
	/*price will be less then or equal to this number
	  In: query
	*/
	PriceTo *int64
	/*sort field, default id
	  In: query
	  Default: "id"
	*/
	SortField *string
	/*sort order, default desc
	  In: query
	  Default: "desc"
	*/
	SortOrder *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetProductsParams() beforehand.
func (o *GetProductsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qArticleLike, qhkArticleLike, _ := qs.GetOK("articleLike")
	if err := o.bindArticleLike(qArticleLike, qhkArticleLike, route.Formats); err != nil {
		res = append(res, err)
	}

	qL, qhkL, _ := qs.GetOK("l")
	if err := o.bindL(qL, qhkL, route.Formats); err != nil {
		res = append(res, err)
	}

	qNameLike, qhkNameLike, _ := qs.GetOK("nameLike")
	if err := o.bindNameLike(qNameLike, qhkNameLike, route.Formats); err != nil {
		res = append(res, err)
	}

	qP, qhkP, _ := qs.GetOK("p")
	if err := o.bindP(qP, qhkP, route.Formats); err != nil {
		res = append(res, err)
	}

	qPriceFrom, qhkPriceFrom, _ := qs.GetOK("priceFrom")
	if err := o.bindPriceFrom(qPriceFrom, qhkPriceFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qPriceTo, qhkPriceTo, _ := qs.GetOK("priceTo")
	if err := o.bindPriceTo(qPriceTo, qhkPriceTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortField, qhkSortField, _ := qs.GetOK("sortField")
	if err := o.bindSortField(qSortField, qhkSortField, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortOrder, qhkSortOrder, _ := qs.GetOK("sortOrder")
	if err := o.bindSortOrder(qSortOrder, qhkSortOrder, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindArticleLike binds and validates parameter ArticleLike from query.
func (o *GetProductsParams) bindArticleLike(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ArticleLike = &raw

	return nil
}

// bindL binds and validates parameter L from query.
func (o *GetProductsParams) bindL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("l", "query", "int64", raw)
	}
	o.L = &value

	return nil
}

// bindNameLike binds and validates parameter NameLike from query.
func (o *GetProductsParams) bindNameLike(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.NameLike = &raw

	return nil
}

// bindP binds and validates parameter P from query.
func (o *GetProductsParams) bindP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("p", "query", "int64", raw)
	}
	o.P = &value

	return nil
}

// bindPriceFrom binds and validates parameter PriceFrom from query.
func (o *GetProductsParams) bindPriceFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("priceFrom", "query", "int64", raw)
	}
	o.PriceFrom = &value

	return nil
}

// bindPriceTo binds and validates parameter PriceTo from query.
func (o *GetProductsParams) bindPriceTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("priceTo", "query", "int64", raw)
	}
	o.PriceTo = &value

	return nil
}

// bindSortField binds and validates parameter SortField from query.
func (o *GetProductsParams) bindSortField(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetProductsParams()
		return nil
	}
	o.SortField = &raw

	if err := o.validateSortField(formats); err != nil {
		return err
	}

	return nil
}

// validateSortField carries on validations for parameter SortField
func (o *GetProductsParams) validateSortField(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortField", "query", *o.SortField, []interface{}{"id", "article", "name", "price", "created"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortOrder binds and validates parameter SortOrder from query.
func (o *GetProductsParams) bindSortOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetProductsParams()
		return nil
	}
	o.SortOrder = &raw

	if err := o.validateSortOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateSortOrder carries on validations for parameter SortOrder
func (o *GetProductsParams) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortOrder", "query", *o.SortOrder, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}
