// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutProductProductIDOKCode is the HTTP code returned for type PutProductProductIDOK
const PutProductProductIDOKCode int = 200

/*PutProductProductIDOK ok

swagger:response putProductProductIdOK
*/
type PutProductProductIDOK struct {
}

// NewPutProductProductIDOK creates PutProductProductIDOK with default headers values
func NewPutProductProductIDOK() *PutProductProductIDOK {

	return &PutProductProductIDOK{}
}

// WriteResponse to the client
func (o *PutProductProductIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutProductProductIDBadRequestCode is the HTTP code returned for type PutProductProductIDBadRequest
const PutProductProductIDBadRequestCode int = 400

/*PutProductProductIDBadRequest error message

swagger:response putProductProductIdBadRequest
*/
type PutProductProductIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutProductProductIDBadRequest creates PutProductProductIDBadRequest with default headers values
func NewPutProductProductIDBadRequest() *PutProductProductIDBadRequest {

	return &PutProductProductIDBadRequest{}
}

// WithPayload adds the payload to the put product product Id bad request response
func (o *PutProductProductIDBadRequest) WithPayload(payload string) *PutProductProductIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put product product Id bad request response
func (o *PutProductProductIDBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductProductIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutProductProductIDUnauthorizedCode is the HTTP code returned for type PutProductProductIDUnauthorized
const PutProductProductIDUnauthorizedCode int = 401

/*PutProductProductIDUnauthorized unauthorized

swagger:response putProductProductIdUnauthorized
*/
type PutProductProductIDUnauthorized struct {
}

// NewPutProductProductIDUnauthorized creates PutProductProductIDUnauthorized with default headers values
func NewPutProductProductIDUnauthorized() *PutProductProductIDUnauthorized {

	return &PutProductProductIDUnauthorized{}
}

// WriteResponse to the client
func (o *PutProductProductIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PutProductProductIDInternalServerErrorCode is the HTTP code returned for type PutProductProductIDInternalServerError
const PutProductProductIDInternalServerErrorCode int = 500

/*PutProductProductIDInternalServerError internal error

swagger:response putProductProductIdInternalServerError
*/
type PutProductProductIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutProductProductIDInternalServerError creates PutProductProductIDInternalServerError with default headers values
func NewPutProductProductIDInternalServerError() *PutProductProductIDInternalServerError {

	return &PutProductProductIDInternalServerError{}
}

// WithPayload adds the payload to the put product product Id internal server error response
func (o *PutProductProductIDInternalServerError) WithPayload(payload string) *PutProductProductIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put product product Id internal server error response
func (o *PutProductProductIDInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProductProductIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
