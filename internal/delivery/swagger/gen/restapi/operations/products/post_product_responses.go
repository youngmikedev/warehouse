// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostProductOKCode is the HTTP code returned for type PostProductOK
const PostProductOKCode int = 200

/*PostProductOK new product id

swagger:response postProductOK
*/
type PostProductOK struct {

	/*
	  In: Body
	*/
	Payload int64 `json:"body,omitempty"`
}

// NewPostProductOK creates PostProductOK with default headers values
func NewPostProductOK() *PostProductOK {

	return &PostProductOK{}
}

// WithPayload adds the payload to the post product o k response
func (o *PostProductOK) WithPayload(payload int64) *PostProductOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post product o k response
func (o *PostProductOK) SetPayload(payload int64) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProductOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostProductBadRequestCode is the HTTP code returned for type PostProductBadRequest
const PostProductBadRequestCode int = 400

/*PostProductBadRequest error message

swagger:response postProductBadRequest
*/
type PostProductBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostProductBadRequest creates PostProductBadRequest with default headers values
func NewPostProductBadRequest() *PostProductBadRequest {

	return &PostProductBadRequest{}
}

// WithPayload adds the payload to the post product bad request response
func (o *PostProductBadRequest) WithPayload(payload string) *PostProductBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post product bad request response
func (o *PostProductBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProductBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostProductUnauthorizedCode is the HTTP code returned for type PostProductUnauthorized
const PostProductUnauthorizedCode int = 401

/*PostProductUnauthorized unauthorized

swagger:response postProductUnauthorized
*/
type PostProductUnauthorized struct {
}

// NewPostProductUnauthorized creates PostProductUnauthorized with default headers values
func NewPostProductUnauthorized() *PostProductUnauthorized {

	return &PostProductUnauthorized{}
}

// WriteResponse to the client
func (o *PostProductUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostProductInternalServerErrorCode is the HTTP code returned for type PostProductInternalServerError
const PostProductInternalServerErrorCode int = 500

/*PostProductInternalServerError internal error

swagger:response postProductInternalServerError
*/
type PostProductInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostProductInternalServerError creates PostProductInternalServerError with default headers values
func NewPostProductInternalServerError() *PostProductInternalServerError {

	return &PostProductInternalServerError{}
}

// WithPayload adds the payload to the post product internal server error response
func (o *PostProductInternalServerError) WithPayload(payload string) *PostProductInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post product internal server error response
func (o *PostProductInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProductInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
