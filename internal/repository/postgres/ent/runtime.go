// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/youngmikedev/warehouse/internal/repository/postgres/ent/product"
	"github.com/youngmikedev/warehouse/internal/repository/postgres/ent/schema"
	"github.com/youngmikedev/warehouse/internal/repository/postgres/ent/session"
	"github.com/youngmikedev/warehouse/internal/repository/postgres/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[0].Descriptor()
	// product.NameValidator is a validator for the "name" field. It is called by the builders before save.
	product.NameValidator = productDescName.Validators[0].(func(string) error)
	// productDescPrice is the schema descriptor for price field.
	productDescPrice := productFields[2].Descriptor()
	// product.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	product.PriceValidator = productDescPrice.Validators[0].(func(int) error)
	// productDescCreatedAt is the schema descriptor for created_at field.
	productDescCreatedAt := productFields[3].Descriptor()
	// product.DefaultCreatedAt holds the default value on creation for the created_at field.
	product.DefaultCreatedAt = productDescCreatedAt.Default.(func() time.Time)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescAccessToken is the schema descriptor for access_token field.
	sessionDescAccessToken := sessionFields[0].Descriptor()
	// session.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	session.AccessTokenValidator = sessionDescAccessToken.Validators[0].(func(string) error)
	// sessionDescRefreshToken is the schema descriptor for refresh_token field.
	sessionDescRefreshToken := sessionFields[1].Descriptor()
	// session.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	session.RefreshTokenValidator = sessionDescRefreshToken.Validators[0].(func(string) error)
	// sessionDescUpdatedAt is the schema descriptor for updated_at field.
	sessionDescUpdatedAt := sessionFields[2].Descriptor()
	// session.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	session.DefaultUpdatedAt = sessionDescUpdatedAt.Default.(func() time.Time)
	// sessionDescCreatedAt is the schema descriptor for created_at field.
	sessionDescCreatedAt := sessionFields[3].Descriptor()
	// session.DefaultCreatedAt holds the default value on creation for the created_at field.
	session.DefaultCreatedAt = sessionDescCreatedAt.Default.(func() time.Time)
	// sessionDescDisabled is the schema descriptor for disabled field.
	sessionDescDisabled := sessionFields[4].Descriptor()
	// session.DefaultDisabled holds the default value on creation for the disabled field.
	session.DefaultDisabled = sessionDescDisabled.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
